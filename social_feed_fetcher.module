<?php

/**
 * @file
 * Social Feed Fetcher Module.
 */

/**
 * Cron job to pull social feeds, as configured by module settings.
 *
 * @throws \Facebook\Exceptions\FacebookSDKException
 */
function social_feed_fetcher_cron() {
  // We access our configuration.
  $config = \Drupal::configFactory()
    ->getEditable('social_feed_fetcher.settings');
  $config_facebook = \Drupal::configFactory()
    ->getEditable('socialfeed.facebooksettings');
  $config_twitter = \Drupal::configFactory()
    ->getEditable('socialfeed.twittersettings');
  $config_instagram = \Drupal::configFactory()
    ->getEditable('socialfeed.instagramsettings');

  $interval = $config->get('cron.interval');

  $request_time = \Drupal::time()->getRequestTime();

  // Check if we need to run the cron yet.
  $next_execution = \Drupal::state()->get('social_feed_fetcher.next_execution');
  $next_execution = !empty($next_execution) ? $next_execution : 0;

  if ($request_time >= $next_execution) {

    /** @var \Drupal\socialfeed\Services\FacebookPostCollector $facebook */
    $facebook = \Drupal::service('socialfeed.facebook');
    /** @var \Drupal\socialfeed\Services\InstagramPostCollector $instagram */
    $instagram = \Drupal::service('socialfeed.instagram');
    /** @var \Drupal\socialfeed\Services\TwitterPostCollector $twitter */
    $twitter = \Drupal::service('socialfeed.twitter');

    /** @var \Drupal\social_feed_fetcher\PluginNodeProcessorManager $node_processor_manager */
    $node_processor_manager = \Drupal::service('plugin.manager.node_processor');

    // Get facebook posts, if enabled.
    $facebook_count = 0;
    if ($config->get('facebook.enabled') == TRUE) {
      $facebook->setFacebookClient();
      $service = 'facebook';
      /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\FacebookNodeProcessor $facebook_processor */
      $facebook_processor = $node_processor_manager->createInstance('facebook_processor');
      // Get all recent posts facebook user.
      $post_types = $config_facebook->get('all_types');
      if (!$post_types) {
        $post_types = $config_facebook->get('post_type');
      }
      try {
        $posts = $facebook->getPosts(
          $config_facebook->get('page_name'),
          $post_types,
          $config_facebook->get('no_feeds')
        );
      } catch (\Exception $exception) {
        drupal_set_message($service . ' ' . $exception->getMessage(), 'error');
      }
      foreach ($posts as $item) {
        $facebook_count += $facebook_processor->processItem($service, $item);
      }
    }
    // Get twitter posts, if enabled.
    $twitter_count = 0;
    if ($config->get('twitter.enabled') == TRUE) {
      $service = 'twitter';
      /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\TwitterNodeProcessor $twitter_processor */
      $twitter_processor = $node_processor_manager->createInstance('twitter_processor');
      $twitter->setTwitterClient();
      try {
        $posts = $twitter->getPosts($config_twitter->get('tweets_count'));
      } catch (\Exception $exception) {
        drupal_set_message($service . ' ' . $exception->getMessage(), 'error');
      }
      foreach ($posts as $item) {
        $twitter_count += $twitter_processor->processItem($service, $item);
      }
    }
    // Get instagram posts, if enabled.
    $instagram_count = 0;
    if ($config->get('instagram.enabled') == TRUE) {
      $service = 'instagram';
      /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\InstagramNodeProcessor $instagram_processor */
      $instagram_processor = $node_processor_manager->createInstance('instagram_processor');
      $instagram->setInstagramClient();
      try {
        $posts = $instagram->getPosts($config_instagram->get('picture_count'), $config_instagram->get('picture_resolution'));
      } catch (\Exception $exception) {
        drupal_set_message($service . ' ' . $exception->getMessage(), 'error');
      }
      foreach ($posts as $item) {
        $instagram_count += $instagram_processor->processItem($service, $item);
      }
    }

    \Drupal::logger('social_feed_fetcher')
      ->info('Social Feed Fetcher ran. Facebook @facebook. Twitter @twitter. Instagram @instagram.', [
        '@facebook' => $config->get('facebook.enabled') ? ' enabled, ' . $facebook_count . ' new posts' : ' disabled',
        '@twitter' => $config->get('twitter.enabled') ? ' enabled, ' . $twitter_count . ' new posts' : ' disabled',
        '@instagram' => $config->get('instagram.enabled') ? ' enabled, ' . $instagram_count . ' new posts' : ' disabled',
      ]);

    if (\Drupal::state()->get('social_feed_fetcher_show_status_message')) {
      drupal_set_message(t('The Social Feed Fetcher cron executed at %time', ['%time' => date_iso8601($request_time)]));
      \Drupal::state()->set('social_feed_fetcher_show_status_message', FALSE);
    }

    \Drupal::state()
      ->set('social_feed_fetcher.next_execution', $request_time + $interval);
  }
}

/**
 * Ensure all post text links are hyperlinks.
 */
function social_feed_fetcher_linkify($text) {
  $rexProtocol = '(https?://)?';
  $rexDomain = '((?:[-a-zA-Z0-9]{1,63}\.)+[-a-zA-Z0-9]{2,63}|(?:[0-9]{1,3}\.){3}[0-9]{1,3})';
  $rexPort = '(:[0-9]{1,5})?';
  $rexPath = '(/[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]*?)?';
  $rexQuery = '(\?[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';
  $rexFragment = '(#[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';

  $text = preg_replace_callback("&\\b$rexProtocol$rexDomain$rexPort$rexPath$rexQuery$rexFragment(?=[?.!,;:\"]?(\s|$))&",
    function ($match) {
      // Prepend http:// if no protocol specified.
      $completeUrl = $match[1] ? $match[0] : "http://{$match[0]}";

      return '<a href="' . $completeUrl . '">'
        . $match[2] . $match[3] . $match[4] . '</a>';
    }, htmlspecialchars($text));
  return $text;
}

/**
 * Save external file.
 *
 * @param $filename
 * @param $path
 *
 * @return int
 */
function social_feed_fetcher_save_file($filename, $path) {
  $name = basename($filename);
  $data = file_get_contents($filename);
  $uri = $path . '/' . $name;
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  return file_save_data($data, $uri, FILE_EXISTS_RENAME)->id();
}
