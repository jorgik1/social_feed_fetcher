<?php

/**
 * @file
 * Social Feed Aggregator Module.
 */

use Brynjdigital\SocialFeed\SocialFeed;
use Drupal\node\Entity\Node;

/**
 * Cron job to pull social feeds, as configured by module settings.
 *
 * @throws \Facebook\Exceptions\FacebookSDKException
 */
function social_feed_fetcher_cron() {
  // We access our configuration.
  $config = \Drupal::configFactory()->getEditable('social_feed_fetcher.settings');
  $config_facebook = \Drupal::configFactory()->getEditable('socialfeed.facebooksettings');
  $config_twitter = \Drupal::configFactory()->getEditable('socialfeed.twittersettings');
  $config_instagram = \Drupal::configFactory()->getEditable('socialfeed.instagramsettings');

  $interval = $config->get('cron.interval');

  $request_time = \Drupal::time()->getRequestTime();

  // Check if we need to run the cron yet.
  $next_execution = \Drupal::state()->get('social_feed_fetcher.next_execution');
  $next_execution = !empty($next_execution) ? $next_execution : 0;

  if ($request_time >= $next_execution) {

    /** @var \Drupal\socialfeed\Services\FacebookPostCollector $facebook */
    $facebook = \Drupal::service('socialfeed.facebook');
    $instagram = \Drupal::service('socialfeed.instagram');
    $twitter = \Drupal::service('socialfeed.twitter');
    // Get facebook posts, if enabled.
    $facebook_count = 0;
    if ($config->get('facebook.enabled') == TRUE) {
      $facebook->setFacebookClient();
      // Get all recent posts facebook user.
      $post_types = $config_facebook->get('all_types');
      if (!$post_types) {
        $post_types = $config_facebook->get('post_type');
      }
      $posts = $facebook->getPosts(
        $config_facebook->get('page_name'),
        $post_types,
        $config_facebook->get('no_feeds')
      );
      foreach ($posts as $item) {
        $facebook_count += social_feed_fetcher_create_node($item);
      }
    }

    // Get twitter posts, if enabled.
    $twitter_count = 0;
    if ($config->get('twitter.enabled') == TRUE) {
      $posts = $twitter->getPosts($config_twitter->get('tweets_count'));
      foreach ($posts as $item) {
        $twitter_count += social_feed_fetcher_create_node($item);
      }
    }

    // Get instagram posts, if enabled.
    $instagram_count = 0;
    if ($config->get('instagram.enabled') == TRUE) {
      $posts = $instagram->getPosts($config_instagram->get('picture_count'), $config_instagram->get('picture_resolution'));

      foreach ($posts as $item) {
        $instagram_count += social_feed_fetcher_create_node($item);
      }
    }

    // Log job.
    \Drupal::logger('social_feed_fetcher')->info('Social Feed Aggregator ran. Facebook @facebook. Twitter @twitter. Instagram @instagram.', [
      '@facebook' => $config->get('facebook.enabled') ? ' enabled, ' . $facebook_count . ' new posts' : ' disabled',
      '@twitter' => $config->get('twitter.enabled') ? ' enabled, ' . $twitter_count . ' new posts' : ' disabled',
      '@instagram' => $config->get('instagram.enabled') ? ' enabled, ' . $instagram_count . ' new posts' : ' disabled',
    ]);

    // Has the cron job been manually called? show the user a message.
    if (\Drupal::state()->get('social_feed_fetcher_show_status_message')) {
      drupal_set_message(t('The Social Feed Fetcher cron executed at %time', ['%time' => date_iso8601($request_time)]));
      \Drupal::state()->set('social_feed_fetcher_show_status_message', FALSE);
    }

    // Set next time for cron to run.
    \Drupal::state()->set('social_feed_fetcher.next_execution', $request_time + $interval);
  }
}

/**
 * Ensure all post text links are hyperlinks.
 */
function social_feed_fetcher_linkify($text) {
  $rexProtocol = '(https?://)?';
  $rexDomain   = '((?:[-a-zA-Z0-9]{1,63}\.)+[-a-zA-Z0-9]{2,63}|(?:[0-9]{1,3}\.){3}[0-9]{1,3})';
  $rexPort     = '(:[0-9]{1,5})?';
  $rexPath     = '(/[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]*?)?';
  $rexQuery    = '(\?[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';
  $rexFragment = '(#[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';

  $text = preg_replace_callback("&\\b$rexProtocol$rexDomain$rexPort$rexPath$rexQuery$rexFragment(?=[?.!,;:\"]?(\s|$))&",
    function ($match) {
      // Prepend http:// if no protocol specified.
      $completeUrl = $match[1] ? $match[0] : "http://{$match[0]}";

      return '<a href="' . $completeUrl . '">'
          . $match[2] . $match[3] . $match[4] . '</a>';
    }, htmlspecialchars($text));
  return $text;
}

/**
 * Create the Social Post node, if it does not exist.
 */
function social_feed_fetcher_create_node($item) {
  // We access our configuration.
  $config = \Drupal::configFactory()->getEditable('social_feed_fetcher.settings');
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'social_post')
    ->condition('field_sfa_id', $item->id);
  $entity_ids = $query->execute();

  // TODO: need to see structure of the posts and change this according to post
  if (empty($entity_ids)) {
    $node = Node::create([
      'type'                => 'social_post',
      'title'               => ucwords($item->service) . ' Post ID: ' . $item->id,
      'field_platform'  => ucwords($item->service),
      'field_id'        => $item->id,
      'field_post'      => ['value' => social_feed_fetcher_linkify(html_entity_decode($item->text)), 'format' => $config->get('formats.post_format')],
      'field_link'      => $item->link,
      'field_image'     => !empty($item->media->video) ? $item->media->video->image : (!empty($item->media->image) ? $item->media->image : ''),
      'field_posted'    => date("Y-m-d\TH:i:s", $item->created),
    ]);
    $node->save();

    return TRUE;
  }

  return FALSE;
}
